<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置组件扫描 -->
    <context:component-scan base-package="pers.prover07.crowd.service" />

    <!-- 配置事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 装配数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 配置插入方法为只读属性，这样可以让 Mysql 帮我们进行一写优化 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>

            <!-- 增删改方法：配置事务传播行为，回滚异常 -->
            <!--
             propagation: 配置事务传播行为
                REQUIRES：    默认值;  表示当前方法必须工作在事务中，如果线程上没有已经开启的事务，则自己开启新事物，如果有就直接使用
                REQUIRES_NEW：建议;    不管当前线程上有没有事务，都要自己开启事务，在自己的事务中运行
            rollback-for: 回滚异常
                默认值：运行时异常
                建议：运行时异常 + 编译时异常
             -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />

        </tx:attributes>
    </tx:advice>

    <!-- 配置事务切面 -->
    <aop:config>
        <!-- 配置切入点表达式 -->
        <aop:pointcut id="txPointCut" expression="execution(* *..*ServiceImpl.*(..))" />

        <!-- 将切入点和事务通知关联起来 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />
    </aop:config>
</beans>